import sys
import os

#   https://www.youtube.com/watch?v=ZDa-Z5JzLYM     vid1
#   https://www.youtube.com/watch?v=BJ-VvGyQxho     vid2
#   https://www.youtube.com/watch?v=rq8cL2XMM5M     vid3

# Represent an employee for a company.
'''Employee class'''
# -------------------------------------------------------------
# -------------------------------------------------------------
# -------------------------------------------------------------
# Created an employee class, with a constructor that requires first, last and pay
'''Note. For a standard class, 'self' will pass the object into the class
but with the classmethod, we are using the cls. There is also a static method
'''


class Employee:
    raise_amount = 1.04  # built in yearly raise
    Num_Of_Emps = 0

    def __init__(self, first, last, pay):
        self.first = first
        self.last = last
        self.pay = pay
        self.email = first + "." + last + "@company.com"

        '''The Num_Of_Emps is built into the actual class. Because
        we have set this to change with "Employee" and not "self"
        every time we create a new employee, the number will rise.
        Note I could not write this above the constructor'''
        Employee.Num_Of_Emps += 1

    # create a method within the class to print the ful name
    def fullName(self):
        return '{} {}'.format(self.first, self.last)

    def apply_raise(self):
        self.pay = int(self.pay * self.raise_amount)

    #   we use this @classmethod to raise the amount for all Employees
    #   used on line 98
    @classmethod
    def set_raise_amt(cls, amount):
        cls.raise_amount = amount

    @classmethod  # Creating an alternative constuctor with a dash string
    def from_string(cls, emp_string):
        first, last, pay = emp_string.split('-')
        return cls(first, last, pay)
    # Remem. the cls means we will use 'Employee' in front not an object
    # line 128 --> we can actually return a new Employee

    # This static class will accept a date and tell us if it is a workday or not
    @staticmethod       # use on line 145
    def is_workday(day):
        if day.weekday() == 5 or day.weekday() == 6:
            return False
        return True

#-----------------------------------------------------------------
# used on line 164
class Developer(Employee):
    raise_amount = 1.10

    def __init__(self, first, last, pay, prog_lang):
        # super implies it is being inhereted
        super().__init__(first, last, pay)
        self.prog_lang = prog_lang
# -----------------------------------------------------------------
# The manager class has a list of employees. If the list sent in is None the list will be empty
class Manager(Employee):
    def __init__(self, first, last, pay, employees = None):
        # super implies it is being inhereted
        super().__init__(first, last, pay)
        if employees is None:
            self.employees = []
        else:
            self.employees = employees

    def add_emp(self, emp):
        if emp not in self.employees:
            self.employees.append(emp)

    def remove_emp(self, emp):
        if emp in self.employees:
            self.employees.remove(emp)

    def print_employees(self):
        for emp in self.employees:
            print('-->', emp.fullName())

# -------------------------------------------------------------
# -------------------------------------------------------------
# -------------------------------------------------------------
# created an employee object based on the class
print("Number of Employees = ", Employee.Num_Of_Emps)
emp_1 = Employee('Nate', 'Terry', 68000)
print("Number of Employees = ", Employee.Num_Of_Emps)

# -------------------------------------------------------------
# -------------------------------------------------------------
# -------------------------------------------------------------
# printed the email of the employee object that we just created.
print(emp_1.email)
# -------------------------------------------------------------
# an external way to print pieces from the class object
print('{} {}'.format(emp_1.first, emp_1.last))

# print the full name from the class method
print(emp_1.fullName())

# can run the full name method via class format.
# you need to tell it what we are calling it with
print(Employee.fullName(emp_1))
# -------------------------------------------------------------
# -------------------------------------------------------------
# -------------------------------------------------------------
print("\nShow the employee pay before and after the raise.")
print(emp_1.pay)
print("emp_1 built in raise amount = ", emp_1.raise_amount)
emp_1.apply_raise()
print(emp_1.pay)
# -------------------------------------------------------------
# -------------------------------------------------------------
# -------------------------------------------------------------
print("\nprint(emp_1.__dict__)   --> To show the objects internal states")
print(emp_1.__dict__)

print("\nprint(emp_2.__dict__)   --> To show the objects internal states of new employee")
emp_2 = Employee('Test', 'None', 50000)
print("Number of Employees = ", Employee.Num_Of_Emps)

print(emp_2.__dict__)
# -------------------------------------------------------------
# -------------------------------------------------------------
# -------------------------------------------------------------
print("\n Increase the pay rate of emp_1, but show that the standard pay raise "
      "in emp_2 is still set to the given.")
print("emp_1 pay raise rate = ", emp_1.raise_amount)
print("emp_2 pay raise rate = ", emp_2.raise_amount)
emp_1.raise_amount = 1.05
print("emp_1 pay raise rate = ", emp_1.raise_amount)
print("emp_2 pay raise rate = ", emp_2.raise_amount)
# -------------------------------------------------------------
# -------------------------------------------------------------
# -------------------------------------------------------------
Employee.set_raise_amt(1.08)
print("\n We used an Employee classmethod to change the raise amount")
print("Every employee will have a 1.08 raise, except emp_1 since we changed his specifically earlier.")
print("emp_1 pay raise rate = ", emp_1.raise_amount)
print("emp_2 pay raise rate = ", emp_2.raise_amount)
# -------------------------------------------------------------
# -------------------------------------------------------------
# -------------------------------------------------------------
print("\nIf we had to read in an employee that came like the line below ")
print("and was seperated by dashes. We can split the employeee into the form")
print("that will create a class object using the python split.")
emp_3_string = 'John-Doe-70000'
print("     ", emp_3_string)
print("     first, last, pay = emp_3_string.split('-')")
first, last, pay = emp_3_string.split('-')
print("     emp_3 = Employee(first, last, pay)")
emp_3 = Employee(first, last, pay)
print(emp_3.__dict__)
# -------------------------------------------------------------
# -------------------------------------------------------------
# -------------------------------------------------------------
print("\nWe created an advanced constructor that can work with an employee string")
emp_4_string = "Ashley-Adam-69000"
print(emp_4_string)
emp_4 = Employee.from_string(emp_4_string)
print(emp_4.__dict__)
# -------------------------------------------------------------
# -------------------------------------------------------------
# -------------------------------------------------------------
print("We are importing a standard library datetime")
import datetime
print("We set our date variable to today, and the library can see that today is a weekeday.")
my_date = datetime.date(2016, 12, 22)
print(Employee.is_workday(my_date))
print("So we ran out workday function, and it spit back out false because today was not 5 or 6 i.e. Sat or Sun")

# -------------------------------------------------------------
# -------------------------------------------------------------
# -------------------------------------------------------------
print("\nJust created a sub-Class that inherets the Employee, but we add in a prog_lang")
dev_1 = Developer('Ben', 'Terry', 45000, 'C++')
dev_2 = Developer('Catherine', 'Meyer', 65000, 'Python')
print("print(dev_1.email)", dev_1.email)
print("print(dev_1.prog_lang)", dev_1.prog_lang)
print(dev_1.__dict__)
print("We over_write the raise_amount for the subclass. Developer will have 1.10")
print(dev_1.raise_amount)
# -------------------------------------------------------------
# -------------------------------------------------------------
# -------------------------------------------------------------
manager_1 = Manager('Sue', 'Smith', 90000, [dev_1])
print("\n\nCreated a manager, check if her Employee email worked", manager_1.email)
print("Included dev_1 in the manger employee list. Print her list: ")
manager_1.print_employees()
print("We added a Developer to her employee list. Print will have both now: ")
manager_1.add_emp(dev_2)
manager_1.print_employees()
print("We removed dev_2 from her employee list. Print now = :")
manager_1.remove_emp(dev_2)
manager_1.print_employees()

# -------------------------------------------------------------
# -------------------------------------------------------------
# -------------------------------------------------------------
print("\nThe isinstance function tells you if the object is a part of that class")
print("manager_1 is part of Manager, and Employee, but not Developer")
print(isinstance(manager_1, Manager))
print(isinstance(manager_1, Employee))
print(isinstance(manager_1, Developer))
print("\nJust like isinstance, issubclass will tell if object is a subclass of...")
print("Here we are comparing a class vs class, not object vs class")
print("Manager is a subclass of Manager, and Employee, but not Developer")
print(issubclass(Manager, Manager))
print(issubclass(Manager, Employee))
print(issubclass(Manager, Developer))
